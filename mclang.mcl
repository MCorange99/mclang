include "std.mcl"

// config
macro MEM_CAPACITY 640000 end
macro SIM_STACK_CAP 1024 end

macro OP_PUSH_INT 0 end
macro OP_PLUS     1 end
macro OP_MINUS    2 end
macro OP_PRINT    3 end
macro OP_DUP      4 end
macro OP_DROP     5 end
macro OP_swap     6 end
macro COUNT_OPS   7 end

macro OPS_CAP       1024 end
macro sizeof(Op)    16 end
macro Op.type       0 + end
macro Op.operand    8 + end
macro @Op.type      Op.type @64 end
macro !Op.type      Op.type !64 end
macro @Op.operand   Op.operand @64 end
macro !Op.operand   Op.operand !64 end


// memory layout

memory file_path_cstr  sizeof(ptr)                 end
memory fd              sizeof(u64)                 end
memory statbuf         sizeof(stat)                end
memory content         sizeof(Str)                 end
memory line            sizeof(Str)                 end
memory word            sizeof(Str)                 end
memory line_number     sizeof(u64)                 end
memory line_start      sizeof(ptr)                 end
memory sim_stack_count sizeof(u64)                 end
memory sim_stack       sizeof(u64) SIM_STACK_CAP * end
memory ops_count       sizeof(u64)                 end
memory ops             sizeof(Op)  OPS_CAP *       end


macro sim_stack_push
    if sim_stack_count @64 SIM_STACK_CAP >= do
        here ": ERROR: data stack overflow in simulation mode" eputs eputs 
        1 exit
    end
    
    sim_stack sim_stack_count @64 8 * + !64
    sim_stack_count inc64
    
end

macro sim_stack_pop
    if sim_stack_count @64 0 = do
        here eputs ": ERROR: data stack underflow in simulation mode" eputs
        1 exit
    end
    sim_stack_count dec64

    sim_stack sim_stack_count @64 8 *  +  @64
end

macro parse_word_as_int // n1 s1 - ret
    0 0 while dup word @Str.count < do
        dup word @Str.data + @8

        if dup isdigit lnot do
        file_path_cstr @64 cast(ptr) cstr-to-str eputs
        ":" puts line_number @64 putd
        ":" puts word @Str.data cast(int) line_start @64 - 1 + putd
        ": ERROR: `" eputs word @Str eputs "` is unknown word\n" eputs
        1 exit
        end

        '0' -
        rot 10 * +
        swap
        1 +
    end drop
end


macro push_op // type operand -- 
  // TODO: assert OPS_CAP
  ops_count @64 sizeof(Op) * ops +
  dup rot swap !Op.operand
  !Op.type
  ops_count inc64
end

macro dump_ops
    0 while dup ops_count @64 < do
        dup sizeof(Op) * ops +
        "Type: "    puts dup     @64 print
        "Operand: " puts 8 + @64 print
        "-------------\n" puts
        1 +
    end
    drop
end

//struct Op {
//    type: u64,
//    operand: u64      
//}

macro simulate_ops
    "Exaustive implementation of ops in simulate ops." here COUNT_OPS 7 = assert
    0 while dup ops_count @64 < do
        dup sizeof(Op) * ops +
        
        dup if @64 OP_PUSH_INT = do
            dup 8 + @64 sim_stack_push
        elif dup @64 OP_PLUS = do
            sim_stack_pop // a
            sim_stack_pop // b
            +
            sim_stack_push // a + b
        elif dup @64 OP_MINUS = do
            sim_stack_pop // a
            sim_stack_pop // b
            -
            sim_stack_push // a + b
        elif dup @64 OP_DROP = do
            sim_stack_pop // a
            drop
        elif dup @64 OP_DUP = do
            sim_stack_pop // a

            dup

            sim_stack_push
            sim_stack_push
        elif dup @64 OP_PRINT = do
            sim_stack_pop
            print
        else
            dup @64 print
            "Unreachable" here false assert
        end
        drop 
        1 +
    end // while
    drop
end

macro compile_ops
    "BITS 64\n" puts
    "print:\n" puts
    "    mov     r9, -3689348814741910323\n" puts
    "    sub     rsp, 40\n" puts
    "    mov     BYTE [rsp+31], 10\n" puts
    "    lea     rcx, [rsp+30]\n" puts
    ".L2:\n" puts
    "    mov     rax, rdi\n" puts
    "    lea     r8, [rsp+32]\n" puts
    "    mul     r9\n" puts
    "    mov     rax, rdi\n" puts
    "    sub     r8, rcx\n" puts
    "    shr     rdx, 3\n" puts
    "    lea     rsi, [rdx+rdx*4]\n" puts
    "    add     rsi, rsi\n" puts
    "    sub     rax, rsi\n" puts
    "    add     eax, 48\n" puts
    "    mov     BYTE [rcx], al\n" puts
    "    mov     rax, rdi\n" puts
    "    mov     rdi, rdx\n" puts
    "    mov     rdx, rcx\n" puts
    "    sub     rcx, 1\n" puts
    "    cmp     rax, 9\n" puts
    "    ja      .L2\n" puts
    "    lea     rax, [rsp+32]\n" puts
    "    mov     edi, 1\n" puts
    "    sub     rdx, rax\n" puts
    "    xor     eax, eax\n" puts
    "    lea     rsi, [rsp+32+rdx]\n" puts
    "    mov     rdx, r8\n" puts
    "    mov     rax, 1\n" puts
    "    syscall\n" puts
    "    add     rsp, 40\n" puts
    "    ret\n" puts
    "global _start\n" puts
    "_start:\n" puts
    "    mov [args_ptr], rsp\n" puts
    0 while dup ops_count @64 < do
        dup sizeof(Op) * ops +
        
        if dup @64 OP_PUSH_INT = do
            "    ; -- push int " puts dup 8 + @64 putd " --\n" puts
            "    mov rax, " puts dup 8 + @64 putd "\n" puts
            "    push rax\n" puts
        elif dup @64 OP_PLUS = do
            "    ; -- plus --\n" puts
            "    pop rax\n" puts
            "    pop rbx\n" puts
            "    add rax, rbx\n" puts
            "    push rax\n" puts
        elif dup @64 OP_PRINT = do
            "    ; -- print --\n" puts
            "    pop rdi\n" puts
            "    call print\n" puts
        elif dup @Op.type OP_DUP = do
            "    ;; -- dup --\n" puts
            "    pop rax\n" puts
            "    push rax\n" puts
            "    push rax\n" puts
        elif dup @Op.type OP_DROP = do
            "    ;; -- drop --\n" puts
            "    pop rax\n" puts
        else
            "Unreachable" here false assert
        end
        drop
        1 +
    end // while
    drop

    "addr_%d:\n" puts
    "    mov rax, 60\n" puts
    "    mov rdi, 0\n" puts
    "    syscall\n" puts
    // strings
    "segment .data\n" puts
    "segment .bss\n" puts
    "    args_ptr: resq 1\n" puts
    "    mem: resb " puts MEM_CAPACITY putd "\n" puts
end // macro


macro usage
    "Usage: mclang [SUBCOMMAND] [FLAGS] [FILE]\n" puts
    "SUBCOMMANDS:\n" puts
    "    c, com, compile                     => Compile the program.\n" puts
    "    s, sim, simulate                    => Simulate/interpret the program.\n" puts
    // "FLAGS:\n" puts
    // "    -h, --help                          => Show this help text.\n" puts
    // "    --unsafe                            => Skip type checking the source code\n" puts
    // "    -r, --run                           => Run the program after compiling. Only relavent in compile mode.\n" puts
    // "    -nrm, --no-remove                   => Remove the out.asm and out.o files. Only relavent in compile mode.\n" puts
    // "    -o [FILENAME]                       => The name of the compile program.\n" puts
    // "    -dm, --dump-memory [DUMP_MEM_SIZE]  => Dump memory from address 0 to [DUMP_MEM_SIZE]. Only relavent in simulate mode.\n" puts
end


macro parse_file_path
    O_RDONLY   // flags
    file_path_cstr @64 cast(ptr) // pathname
    AT_FDCWD   // dirfd
    openat

    if dup 0 < do
        "ERROR: could not open file " eputs file_path_cstr @64 cast(ptr) cstr-to-str eputs "\n" eputs
        1 exit
    end

    fd !64

    if statbuf fd @64 fstat 0 < do
        "ERROR: could not determine the size of file " eputs file_path_cstr @64 cast(ptr) cstr-to-str eputs "\n" eputs
        1 exit
    end

    statbuf @stat.st_size content !Str.count

    0                        // offset
    fd @64                   // fd
    MAP_PRIVATE              // flags
    PROT_READ                // prot
    content @Str.count       // length
    NULL                     // addr
    mmap
    content !Str.data

    if content @Str.data cast(int) 0 < do
        "ERROR: could not memory map file " eputs file_path_cstr @64 cast(ptr) cstr-to-str eputs "\n" eputs
        1 exit
    end

    1 line_number !64
    while content @Str.count 0 > do
        line content String.chop_line
        line @Str.data line_start !64
        while line @Str.count 0 > do
            line String.trim_left
            word line String.chop_word

            here eputs ": Assertion Failed: Exhaustive handling of Op types in parse-file-path\n" 

            if word @Str "+" streq do
                OP_PLUS 0 push_op
            elif word @Str "-" streq do
                OP_MINUS 0 push_op
            elif word @Str "print" streq do
                OP_PRINT 0 push_op
            elif word @Str "dup" streq do
                OP_DUP 0 push_op
            elif word @Str "drop" streq do
                OP_DROP 0 push_op
            else
                OP_PUSH_INT parse_word_as_int push_op
            end
        end
        line_number inc64
    end
    // TODO: parse_file_path does not clean up resources after itself
end


macro main
    if argc 2 < do
        usage
        "[ERR]: No subcommand provided." eputs
        1 exit
    end

    2 nth_argv file_path_cstr !64

    
    1 nth_argv 
    if dup "com"c cstreq do
        if argc 3 < do
            usage
            "[ERR]: No file provided.\n" eputs
            1 exit
        end 

        parse_file_path
        compile_ops
    elif dup "sim"c cstreq do
        if argc 3 < do
            usage
            "[ERR]: No file provided.\n" eputs
            1 exit
        end 

        parse_file_path
        simulate_ops
    elif dup "dump"c cstreq do
        if argc 3 < do
            usage
            "[ERR]: No file provided.\n" eputs
            1 exit
        end 

        parse_file_path
        dump_ops
    elif dup "help"c cstreq do
        usage
        0 exit
    else
        usage
        "[ERR]: Unknown subcommand `" eputs dup cstr-to-str eputs "`\n" eputs
        1 exit
    end
    drop
end

main