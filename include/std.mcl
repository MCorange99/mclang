
include "linux.mcl" // Missing 1 char D:
include "colors.mcl"

// sizes
macro NULL 0 end
macro sizeof(u64) 8 end
macro sizeof(u32) 4 end
macro sizeof(ptr) sizeof(u64) end

// util
macro true  1 cast(bool) end
macro false 0 cast(bool) end




macro write SYS_write syscall3 end
macro read SYS_read syscall3 end
macro openat SYS_openat syscall4 end
macro fstat SYS_fstat syscall2 end
macro close SYS_close syscall1 end
macro exit SYS_exit syscall1 drop end
macro mmap SYS_mmap syscall6 end
macro clock_nanosleep SYS_clock_nanosleep syscall4 end
macro fork SYS_fork syscall0 end
macro getpid SYS_getpid syscall0 end
macro execve SYS_execve syscall3 end
macro wait4 SYS_wait4 syscall4 end

macro sizeof(stat) 144 end
macro stat.st_dev 0 + end
macro stat.st_ino 8 + end
macro stat.st_mode 24 + end
macro stat.st_nlink 16 + end
macro stat.st_uid 28 + end
macro stat.st_gid 32 + end
macro stat.st_rdev 40 + end
macro stat.st_size 48 + end
macro @stat.st_size stat.st_size @64 end
macro stat.st_blksize 56 + end
macro stat.st_blocks 64 + end
macro stat.st_atim 72 + end
macro stat.st_mtim 88 + end
macro stat.st_ctim 104 + end

macro sizeof(stat.st_dev) 8 end
macro sizeof(stat.st_ino) 8 end
macro sizeof(stat.st_mode) 4 end
macro sizeof(stat.st_nlink) 8 end
macro sizeof(stat.st_uid) 4 end
macro sizeof(stat.st_gid) 4 end
macro sizeof(stat.st_rdev) 8 end
macro sizeof(stat.st_size) 8 end
macro sizeof(stat.st_blksize) 8 end
macro sizeof(stat.st_blocks) 8 end
macro sizeof(stat.st_atim) 16 end
macro sizeof(stat.st_mtim) 16 end
macro sizeof(stat.st_ctim) 16 end


macro AT_FDCWD -100 end
macro O_RDONLY 0 end
macro O_WRONLY 1 end
macro O_RDWR   2 end
macro O_CREAT 64 end


// 
macro MAP_PRIVATE 2 end
macro PROT_READ 1 end

macro STD_IN 0 end
macro STD_OUT 1 end
macro STD_ERR 2 end


macro fputs
  write drop
end

macro PUTD_BUFFER_CAP 32 end
memory putd-buffer PUTD_BUFFER_CAP end
memory putd-fd sizeof(u64) end
// TODO: fputd should fail if write call fails
macro fputd // value fd --
  putd-fd !64

  if dup 0 = do
    "0" putd-fd @64 fputs
  else
    putd-buffer PUTD_BUFFER_CAP +
    while over 0 > do
      1 - dup rot
      10 divmod
      rot swap '0' + swap !8 swap
    end

    dup
    putd-buffer PUTD_BUFFER_CAP + swap - swap putd-fd @64 fputs
  end
  drop
end

macro putd STD_OUT fputd end

macro puts
  STD_OUT fputs
end

macro eputs
  STD_ERR fputs
end



macro 2dup
    over over
end
macro 2drop
    drop drop
end

macro / divmod drop end
macro % divmod swap drop end
macro mod % end
macro div / end
macro ++ 1 + end
macro -- 1 - end

macro nth-argv
    8 * argv + @64 cast(ptr)
end

macro inc64
    dup @64 1 + swap !64
end

macro dec64
    dup @64 1 - swap !64
end
//
// assert() -> Assert if true, if not print message and exit
// ARGS: [str: str, position: str, condition: BOOL]
//
macro assert
    if cast(bool) do
        2drop
        2drop
    else
        Colors.RED eputs
        eputs 
        ": Assertion error: " eputs
        Colors.RESET eputs
        eputs 
        1 exit
    end
end

//
// memcpy() -> Copy data to memory easily.
// ARGS: [data_size: INT, data: PTR, destination: PTR]
//
memory memcpy_size 8 end
memory memcpy_src  8 end
memory memcpy_dest 8 end

macro memcpy
    memcpy_dest !64
    memcpy_src  !64
    memcpy_size !64
    0 while dup memcpy_size @64 < do
        dup  memcpy_src  @64 + cast(ptr) @8
        over memcpy_dest @64 + cast(ptr) !8
        1 +
    end drop
end

// Custom logical not, since the intrinsic `not` is the bitwise one and does not allow
// to properly invert a boolean.
macro lnot
  cast(int) 1 - cast(bool)
end

// QoL words
macro << shl end
macro >> shr end


// #######################
// String stuff
// #######################

macro sizeof(Str) 16 end
macro Str.count   0 + end
macro Str.data    8 + end
macro @Str.count  Str.count @64 end
macro @Str.data   Str.data  @64 cast(ptr) end
macro !Str.count  Str.count !64 end
macro !Str.data   Str.data  !64 end

macro @Str
  dup @Str.count
  swap @Str.data
end

macro !Str // count data dst -
  dup rot swap
  !Str.data
  !Str.count
end

macro str-chop-one-left
   dup Str.count dec64
       Str.data inc64
end

macro str-trim-left // input --
  while 
    if dup @Str.count 0 > do
       dup @Str.data @8 ' ' =
    else false end
  do
    dup str-chop-one-left
  end
  drop
end

memory str-chop-by-delim-tmp sizeof(u64) end
macro str-chop-by-delim
    rot str-chop-by-delim-tmp !64
    2dup @Str.data swap !Str.data
    over 0 swap !Str.count
    while
      if dup @Str.count 0 > do
        dup @Str.data @8 str-chop-by-delim-tmp @64 !=
      else false end
    do
      dup str-chop-one-left
      swap dup Str.count inc64 swap
    end
    if dup @Str.count 0 > do
      dup str-chop-one-left
    end 
    2drop
end

macro cstrlen
  dup
  while dup @8 0 != do 1 + end
  swap -
end

macro cstreq
  while
    if over @8 0 != over @8 0 != and do
       over @8 over @8 =
    else
       false
    end
  do
    1 + swap 1 +
  end
  @8 0 =
  swap @8 0 =
  and
end

macro cstr-to-str
  dup cstrlen swap
end

memory streq_a sizeof(Str) end
memory streq_b sizeof(Str) end
macro streq
  streq_a !Str
  streq_b !Str
  if streq_a @Str.count streq_b @Str.count = do
    0 while
      if dup streq_a @Str.count < do
        dup streq_a @Str.data + @8
        over streq_b @Str.data + @8
        =
      else false end
    do 1 + end
    streq_a @Str.count >=
  else false end
end

macro isdigit
  dup  '0' >=
  swap '9' <=
  and
end

// Deprecated Words
macro .64 swap !64 end
macro ,64 @64 end
macro ! !8 end
macro @ @8 end
macro . swap ! end
macro , @ end
macro cstr-to-pstr cstr-to-str end
memory mem 640000 end
